replicaCount: 1

API_KEY:
COLLECTOR_ENDPOINT: https://otel.kloudmate.com:4318
KM_UPDATE_ENDPOINT: https://api.kloudmate.com/agents/config-check
KM_CONFIG_CHECK_INTERVAL: 30s

daemonsetName: kloudmate-agent
agentServiceName: kloudmate-agent-service

image:
  repository: ghcr.io/kloudmate/km-kube-agent
  pullPolicy: Always
  tag: "latest"

configUpdater:
  image:
    repository: ghcr.io/kloudmate/km-kube-updater
    pullPolicy: Always
    tag: "latest"

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "km-svc-account"

rbac:
  # -- The ClusterRole name
  clusterRoleName: km-cluster-role
  clusterRoleNamespace: default

  ClusterRoleBindingName: km-agent-cluster-binding
  ClusterRoleBindingNamespace: default

configMap:
  name: "km-agent-configmap"

InstrumentationCrd:
  name: instrumentation-crd

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}


selectorLabels:
  app.kubernetes.io/component: km-km-kube-agent

extraLabels:
  app.kubernetes.io/name: km-k8sdaemonset
  app.kubernetes.io/instance: kloudmate-prod-release # Or "{{ .Release.Name }}" in Helm
  app.kubernetes.io/component: km-km-kube-agent-deployment
  app.kubernetes.io/part-of: observability-apm


# ----------- Labels ------------

# Labels for the Service Account.
serviceAccountLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-sa"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the Cluster Role.
clusterRoleLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-clusterrole"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the Cluster Role Binding.
clusterRoleBindingLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-clusterrolebinding"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the Instrumentation CRD.
instrumentationCrdLabels:
  app.kubernetes.io/name: "km-kube-instrumentation"
  app.kubernetes.io/instance: "km-kube-instrumentation-crd"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the Service.
serviceLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-service"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the ConfigMap.
configMapDeploymentLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-config-deployment"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"

# Labels for the ConfigMap.
configMapDaemonsetLabels:
  app.kubernetes.io/name: "km-kube-agent"
  app.kubernetes.io/instance: "km-kube-agent-config-daemonset"
  app.kubernetes.io/part-of: "kloudmate-platform"
  app.kubernetes.io/managed-by: "Helm"
  product: "kloudmate"


# ----------- Operator ------------
opentelemetry-operator:
  crds:
    # Set to 'false' if you are managing CRDs externally, or 'true' to let the operator manage them.
    # The current setting 'true' is fine, but double-check your installation strategy.
    create: true
  enabled: true # install the operator as part of this chart
  admissionWebhooks:
    create: true
    servicePort: 443
    # Change the failure policy for pods from 'Ignore' to 'Fail' if you want pods
    # to fail creation if the webhook is not available.
    pods:
      failurePolicy: Fail

    ## Adds a prefix to the mutating webhook name.
    ## This can be used to order this mutating webhook with all cluster's mutating webhooks.
    namePrefix: ""

    ## Customize webhook timeout duration
    timeoutSeconds: 10

    ## Provide selectors for objects
    namespaceSelector: {}
    objectSelector: {}
    certManager:
      enabled: false

    ## Use Helm to automatically generate self-signed certificate.
    ## certManager must be disabled and autoGenerateCert must be enabled.
    ## If true and certManager.enabled is false, Helm will automatically create a self-signed cert and secret.
    autoGenerateCert:
      enabled: true
      # If set to true, new webhook key/certificate is generated on helm upgrade.
      recreate: true
      # Cert period time in days. The default is 365 days.
      certPeriodDays: 365
  

  manager:
    resources: {}
    autoInstrumentationImage:
      nodejs:
        repository: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-nodejs
        tag: latest
      java:
        repository: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java
        tag: latest
      python:
        repository: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python
        tag: latest
      dotnet:
        repository: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-dotnet
        tag: latest

# ----------- cert-manager ------------
cert-manager:
  enabled: false
  # Set crds.enabled to 'true' to have cert-manager install and manage its own CRDs.
  # It's a common source of bugs for cert-manager to have its CRDs managed externally.
  crds:
    enabled: false
    keep: true