apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMap.name }}
  namespace: {{ .Release.Namespace }}
data:
  # The key here will become the filename inside the mountPath.
  # We name it exactly "agent.config.yaml" so it appears as such.
  agent.yaml: |

    # Kubernetes Monitoring with Default Components
    extensions:
      # File Storage Extension: Provides persistent storage for receivers/processors (e.g., for stateful components).
      # file_storage:
      #   directory: /var/lib/otelcol/file_storage # Directory for persistent storage
        # You'll need to mount a PersistentVolume to this directory if running as Deployment,
        # or ensure it's a persistent host path if running as DaemonSet.

      # Protects the collector from OOMKilled by dropping data if memory usage exceeds limits.
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 10s

      # ZPages Extension: Provides live debugging and profiling endpoints (e.g., /debug/rpcz).
      # Useful for development and troubleshooting, but might expose sensitive info.
      # zpages:
        # endpoint: "0.0.0.0:55679"

    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"

      k8s_cluster:
        auth_type: kubeConfig
        k8s_leader_elector: <reference k8s leader elector extension>
        node_conditions_to_report: [Ready, MemoryPressure]
        allocatable_types_to_report: [cpu, memory]
        metrics:
          k8s.container.cpu_limit:
            enabled: false
        resource_attributes:
          container.id:
            enabled: false

      # Kubelet Stats Receiver: Gathers detailed Pod and container resource usage metrics
      # from the Kubelet's `/stats/summary` endpoint on each node.
      # Typically used when the collector runs as a DaemonSet.
      kubeletstats:
        collection_interval: 10s # Scrape interval for Kubelet stats
        auth:
          # Uses the mounted ServiceAccount token for authentication with Kubelet
          # Kubelet typically exposes /stats/summary on port 10250 (read-only) or 10255 (read-write)
          # Ensure Kubelet's `--read-only-port` or `--authentication-token-webhook` is configured.
          service_account:
        insecure_skip_verify: true # Set to false and provide proper certs in production
        metric_groups:
          - container # Collects container-level metrics
          - pod       # Collects pod-level metrics
          - node      # Collects node-level metrics (e.g., CPU, memory, filesystem)
          - volume    # Collects volume-level metrics

      # Host Metrics Receiver: Collects system-level metrics from the host OS (CPU, memory, disk, network).
      # Requires the collector to run as a DaemonSet (currently running) with host path mounts for /proc, /sys, /dev (hostfs already mounted).
      # hostmetrics:
      #   collection_interval: 10s
      #   scrapers:
      #     cpu:
      #     disk:
      #     filesystem:
      #     load:
      #     memory:
      #     network:
      #     paging:
      #     processes:

      ## Filelog Receiver: Collects logs from files, typically container logs from the host filesystem.
      ## Requires the collector to run as a DaemonSet with mounts for /var/log/pods and /var/lib/docker/containers (or /var/log/containers).
      filelog:
        include: [ /var/log/pods/*/*.log, /var/log/containers/*.log ] # Common paths for K8s container logs
        start_at: beginning
        poll_interval: 4s
        # Optional: configure operators for parsing logs (e.g., CRI, JSON, regex)
        # This example uses a simple CRI parser for standard Kubernetes logs.
        operators:
          - id: cri-parser
            type: cri
            # Example: parse timestamp and stream type from CRI log format
            # You might need to adjust this based on your container runtime's log format.
          - id: set-attributes
            type: set
            attributes:
              log.file.path: "$file_path" # Add the log file path as an attribute
              log.file.name: "$file_name" # Add the log file name as an attribute

    processors:
      batch:
        send_batch_size: 1000
        timeout: 10s
        send_batch_max_size: 2000

      # Resource Detection processor: Automatically adds Kubernetes metadata as resource attributes.
      # This is crucial for enriching all telemetry signals with context (Pod name, namespace, node name, etc.).
      resourcedetection/kubernetes:
        detectors: ["system", "env", "kubernetes"] # Use system/env for host/pod-level env vars
        timeout: 2s
        kubernetes:
          # These `pod_association` rules help the collector link telemetry
          # to Kubernetes Pods by inspecting various attributes or environment variables.
          pod_association:
            - from: resource_attribute
              name: k8s.pod.ip
            - from: env
              name: KUBERNETES_NODE_NAME # Assumes this env var is set in the collector's Pod spec
              resource_attribute: k8s.node.name
            - from: env
              name: KUBERNETES_POD_NAME # Assumes this env var is set in the collector's Pod spec
              resource_attribute: k8s.pod.name
            - from: env
              name: KUBERNETES_NAMESPACE # Assumes this env var is set in the collector's Pod spec
              resource_attribute: k8s.namespace.name

      # Kubernetes Attributes Processor: Enriches traces, metrics, and logs with Kubernetes Pod metadata.
      # It looks up Pods by IP address and adds labels, annotations, and other Pod info.
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false # Set to true if you want to keep original resource attributes
        # Extract Pod metadata (labels, annotations, container names)
        pod_association:
          - from: resource_attribute
            name: k8s.pod.ip
        # Add pod labels and annotations as attributes
        pod_labels:
          - app.kubernetes.io/name
          - app.kubernetes.io/instance
        pod_annotations:
          - prometheus.io/scrape
          - prometheus.io/port
        # Add container ID and image
        container_id: true
        container_image: true
        # Add node name
        node_from_kubelet: true
        # Filter which namespaces to process (optional)
        # filter:
        #   namespaces:
        #     - kube-system
        #     - default

      # Attributes Processor: Generic processor to add, delete, or rename attributes.
      # Useful for standardizing attribute names or adding static attributes.
      attributes:
        actions:
          - key: "env"
            value: "production"
            action: insert
          - key: "service.name"
            from_attribute: "k8s.pod.name"
            action: upsert

      # Probabilistic Sampler Processor: Samples traces based on a probability.
      # Useful for reducing trace volume in high-throughput environments.
      probabilisticsampler:
        hash_seed: 22 # Seed for consistent sampling
        sampling_percentage: 10 # Sample 10% of traces

      # Redaction Processor: Redacts sensitive information from logs and traces.
      # Use with caution and ensure regex patterns are correct.
      redaction:
        body:
          - regexp: '(?i)password=\w+' # Example: Redact passwords in log body
            replace: 'password=***'
        attributes:
          - key: 'user.email' # Example: Redact user email attribute
            replace: '***'
          - key: 'credit_card_number'
            replace: '***'

      # Resource Processor: Used to set, update, or delete resource attributes.
      # Often used after resource detection to refine resource attributes.
      resource:
        attributes:
          - key: "cloud.provider"
            value: "kubernetes"
            action: insert
          - key: "service.namespace"
            from_attribute: "k8s.namespace.name"
            action: upsert

    exporters:
      # OTLP Exporter: Sends all processed telemetry data (metrics, traces, logs) to your Kloudmate backend.
      otlphttp:
        endpoint: "otel.kloudmate.com:4318" # <-- REPLACE with your actual Kloudmate OTLP endpoint (port 4317 for gRPC, 4318 for HTTP)
        headers:
            Authorization: ${env:KM_API_KEY}
        tls:
          insecure: true # Set to 'false' and configure proper 'ca_file' etc. for production (especially for 4317 gRPC)
          # ca_file: /etc/ssl/certs/ca-certificates.crt # Path to CA cert bundle
          # client_key_file: /path/to/client-key.pem    # If mutual TLS is required
          # client_ca_file: /path/to/client-cert.pem    # If mutual TLS is required

      # Debug Exporter: Prints all processed telemetry data to the collector's logs.
      # Useful for debugging pipelines. Remove or set loglevel to 'error' in production.
      debug:
        verbosity: detailed # detailed, normal, basic

      # Nop Exporter: A "no operation" exporter that discards all data.
      # Useful for testing pipelines or temporarily disabling export without breaking the config.
      nop:

    service:
      # Enabled Extensions: Must list all extensions used in the configuration.
      extensions:
        # - file_storage
        - memory_limiter
        # - zpages

      # Defines the processing pipelines for each telemetry signal.
      pipelines:
        metrics: # Metrics pipeline
          receivers:
            - k8s_cluster # From K8s API
            - kubeletstats       # From Kubelet /stats/summary
            - hostmetrics        # From host OS
            - otlp               # Incoming OTLP metrics from applications
          processors:
            - resourcedetection/kubernetes # Add K8s metadata (resource attributes)
            - k8sattributes              # Add K8s metadata (attributes)
            - resource                   # Refine resource attributes
            - attributes                 # Add/modify generic attributes
            - memory_limiter             # Protects against OOM
            - batch                      # Batches for efficiency
          exporters:
            - otlphttp # Sends to Kloudmate
            - debug          # Logs for debugging (remove in production)

        traces: # Traces pipeline
          receivers:
            - otlp # Incoming OTLP traces from applications
          processors:
            - resourcedetection/kubernetes # Add K8s metadata (resource attributes)
            - k8sattributes              # Add K8s metadata (attributes)
            - resource                   # Refine resource attributes
            - attributes                 # Add/modify generic attributes
            - redaction                  # Redact sensitive trace attributes
            - probabilisticsampler       # Sample traces
            - memory_limiter             # Protects against OOM
            - batch                      # Batches for efficiency
          exporters:
            - otlphttp # Sends to Kloudmate
            - debug          # Logs for debugging (remove in production)

        logs: # Logs pipeline
          receivers:
            - filelog        # From host container logs
            # - fluentforward  # From Fluentd/Fluent Bit agents
            - otlp           # Incoming OTLP logs from applications
          processors:
            - resourcedetection/kubernetes # Add K8s metadata (resource attributes)
            - k8sattributes              # Add K8s metadata (attributes)
            - resource                   # Refine resource attributes
            - attributes                 # Add/modify generic attributes
            - redaction                  # Redact sensitive log bodies/attributes
            - memory_limiter             # Protects against OOM
            - batch                      # Batches for efficiency
          exporters:
            - otlphttp # Sends to Kloudmate
            - debug          # Logs for debugging (remove in production)