# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# The api key is a must to be passed and it will be injected in the configmap
API_KEY:
COLLECTOR_ENDPOINT:
KM_CONFIG_CHECK_INTERVAL:

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/kloudmate/km-agent-k8s
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "km-svc-account"

rbac:
  # -- The ClusterRole name from your original ClusterRoleBinding.
  clusterRoleName: km-cluster-role
  ClusterRoleBindingName: km-agent-cluster-binding

configMap:
  name: "km-agent-configmap"

InstrumentationCrd:
  name: instrumentation-crd

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# ----------- Operator ------------
opentelemetry-operator:

  enabled: true # install the operator as part of this chart
  admissionWebhooks:
    certManager:
      enabled: true
  admissionWebhooks:
    create: true
    servicePort: 443
    failurePolicy: Fail
    secretName: ""

    ## Defines the sidecar injection logic in Pods.
    pods:
      failurePolicy: Ignore

    ## Adds a prefix to the mutating webhook name.
    ## This can be used to order this mutating webhook with all cluster's mutating webhooks.
    namePrefix: ""

    ## Customize webhook timeout duration
    timeoutSeconds: 10

    ## Provide selectors for objects
    namespaceSelector: {}
    objectSelector: {}
    certManager:
      enabled: true
      ## Provide the issuer kind and name to do the cert auth job.
      ## By default, OpenTelemetry Operator will use self-signer issuer.
      issuerRef: {}
      ## Annotations for the cert and issuer if cert-manager is enabled.
      certificateAnnotations: {}
      issuerAnnotations: {}
      # duration must be specified by a Go time.Duration (ending in s, m or h)
      duration: ""
      renewBefore: ""

    ## Use Helm to automatically generate self-signed certificate.
    ## certManager must be disabled and autoGenerateCert must be enabled.
    ## If true and certManager.enabled is false, Helm will automatically create a self-signed cert and secret.
    autoGenerateCert:
      enabled: true
      # If set to true, new webhook key/certificate is generated on helm upgrade.
      recreate: true
      # Cert period time in days. The default is 365 days.
      certPeriodDays: 365
  manager:
    createCollector: false

cert-manager:
  enabled: true
  crds:
    enabled: false
    keep: true